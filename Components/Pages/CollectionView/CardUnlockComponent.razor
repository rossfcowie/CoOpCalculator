@using Data
@using System.Diagnostics
@using System;
@using System.Text.Json;
@using Microsoft.JSInterop;
@using CoOpCalculator.Components.Pages.CollectionView;
@inject IJSRuntime JSRuntime
    @if(showWindow){

    <div class="overlay" @onclick="CloseWindow">
    <div class="modal-window">
        <Card i="@myNum" level="@getCard()"></Card>
        </div>
    </div>
}

@code {
    [Parameter] public int myNum { get; set; }
    [Parameter] public string myGM { get; set; }
    [Parameter] public string myRank { get; set; }

    private byte[] myCollection { get; set; } = new byte[90];
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        myCollection = await GetByteArrayAsync();
        ShowWindow();
        InvokeAsync(StateHasChanged);
    }

    private byte getCard()
    {
        return myCollection[myNum - 10];
    }
    private void ShowWindow()
    {
        if (!showWindow)
        {
            Stats s = new Stats();
            s.collection = myCollection;
            showWindow = s.getCardStar(myNum, myRank, myGM);
            save();
            
        }
    }


    private void CloseWindow()
    {
        showWindow = false;

    }
    private async Task save()
    {
        // Generate a new byte array
        var randomBytes = myCollection;

        // Save the byte array to local storage
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "myStats", Convert.ToBase64String(randomBytes));

        myCollection = randomBytes;

    }
    private async Task<Byte[]> GetByteArrayAsync()
    {
        try
        {
            // Check if the byte array exists in local storage
            var base64Encoded = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "myStats");
            if (!string.IsNullOrEmpty(base64Encoded))
            {
                // Retrieve the byte array from local storage
                return Convert.FromBase64String(base64Encoded);
            }
            else
            {
                // Generate a new byte array
                var randomBytes = myCollection;

                // Save the byte array to local storage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "myStats", Convert.ToBase64String(randomBytes));

                return randomBytes;
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions (e.g., when local storage is disabled or unavailable)
            // You can log the exception or take appropriate action
            return null; // Return null or handle the error as needed
        }
    }
    private bool showWindow = false;

}
