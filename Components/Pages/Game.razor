@page "/game"

@using Data
@using System.Diagnostics
@using System;
@using System.Text.Json;
@using Microsoft.JSInterop;

@inject ServerService ss;
@inject IJSRuntime JSRuntime
<PageTitle>Game</PageTitle>

    @if(gameClient != null)
{
    @if (gameServer.ingame)
    {
        {        gamemode = gameServer.gamemode;    }
        <div class="Game">
            <div style="height:@(myDynamicHeightInPixels)%;" class="fakebg"></div>
        <h1 class="Goal" style=" border-bottom: solid black 1px">@gameClient!.myserver.GoalValue</h1>
        @switch (gamemode)
        {
            case 1:
            <div class="Sum">
                    <table >
                        <th></th>
                        <th></th>
                    <tr><td></td> <td > @gameClient!.otherValue</td></tr>
                    <tr> <td>*</td><td>@newValue</td></tr>
                        <tr style=" border-top: solid black 1px"><td>=</td><td>@(gameClient!.otherValue * newValue)</td></tr>
                    </table>
                </div>
            break;
            case 2:
                    <div class="Sum">
                        <table>
                            <th></th>
                            <th></th>
                            <tr><td></td> <td> @gameClient!.otherValue</td></tr>
                            <tr> <td>+</td><td>@newValue</td></tr>
                            <tr style=" border-top: solid black 1px"><td>=</td><td>@(gameClient!.otherValue + newValue)</td></tr>
                        </table>
                    </div>
            break;
                case 3:
                    <div class="Sum">
                        <table>
                            <th></th>
                            <th></th>
                            @if (gameClient!.otherValue>newValue){
                            <tr><td></td> <td> @gameClient!.otherValue</td></tr>
                            <tr> <td>-</td><td>@newValue</td></tr>
                            }else{
                                <tr><td></td><td>@newValue</td></tr>
                                <tr><td>-</td><td > @gameClient!.otherValue</td></tr>
                            }
                            <tr style=" border-top: solid black 1px"><td>=</td><td>@Math.Abs(gameClient!.otherValue - newValue)</td></tr>
                        </table>
                    </div>
            break;
        }
        @if (newValue < 10)
        {

            <h2>The minimum number allowed is 10</h2>
        }
        <div class="row">
            <div class="col-4">
                @if (recomendvalue().Equals("Delete"))
                {
                        <button style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="DeleteClick"> &lt </button>

                }
                else
                {
                        <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="DeleteClick">&lt</button>

                }

            </div>
            <div class="col-4">
                @if (recomendvalue().Equals("0"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(0)">0</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="() => Clicked(0)">0</button>

                }
            </div>
            <div class="col-4">
                @if (recomendvalue().Equals("CE"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="CEclick">CE</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="CEclick">CE</button>

                }

            </div>
        </div>
        <div class="row">
            <div class="col-4">
                @if (recomendvalue().Equals("1"))
                {
                    <button style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(1)">1</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;"  class="btn btn-primary" @onclick="() => Clicked(1)">1</button>

                }

            </div>
            <div class="col-4">
                @if (recomendvalue().Equals("2"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(2)">2</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="() => Clicked(2)">2</button>

                }

            </div>
            <div class="col-4">

                @if (recomendvalue().Equals("3"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(3)">3</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="() => Clicked(3)">3</button>

                }
            </div>
        </div>
        <div class="row">
            <div class="col-4">
                @if (recomendvalue().Equals("4"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(4)">4</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="() => Clicked(4)">4</button>

                }

            </div>
            <div class="col-4">
                @if (recomendvalue().Equals("5"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(5)">5</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="() => Clicked(5)">5</button>

                }
            </div>
            <div class="col-4">

                @if (recomendvalue().Equals("6"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(6)">6</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="() => Clicked(6)">6</button>

                }
            </div>
        </div>
        <div class="row">
            <div class="col-4">
                @if (recomendvalue().Equals("7"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(7)">7</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="() => Clicked(7)">7</button>

                }

            </div>
            <div class="col-4">
                @if (recomendvalue().Equals("8"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(8)">8</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="() => Clicked(8)">8</button>

                }
            </div>
            <div class="col-4">
                @if (recomendvalue().Equals("9"))
                {
                    <button  style="width:-webkit-fill-available; Background-Color:lightyellow; color:black" class="btn btn-primary" @onclick="() => Clicked(9)">9</button>

                }
                else
                {
                    <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="() => Clicked(9)">9</button>

                }
            </div>
        </div>
    </div>
}
    else
    {
        <p>@gameServer.returnMessage @gameServer.t.Elapsed</p>
        <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="Play">Play</button>
    }
    }
    else
    {
    <InputSelect @bind-Value="gamemode">
        <option  value="1">Multiply</option>
        <option value="2">Add</option>
        <option value="3">Subtract</option>
        <option value="4">Any</option>
    </InputSelect>
        <p>@ss.queued People in the queue</p>
        <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="Play">Play</button>
    @if (t.IsRunning)
    {
        <p>In Queue</p>
        <p>@t.Elapsed.Seconds</p>
        <button style="width:-webkit-fill-available;" class="btn btn-primary" @onclick="StopMatching">Stop</button>
    }
    }
@code {
    private double myDynamicHeightInPixels {
        get{
            return Math.Min(100,((gameServer.t.Elapsed / TimeSpan.FromSeconds(30)) * 100));
        }
    }


    public int gamemode = 4;
    private GameServer gameServer {
        get
        {
            if(mymatcher is not null)
            {
                if (ss.checkMatchMake(mymatcher))
                {
                    return mymatcher.gameServer;
                }
                else
                {
                    return null;
                }


            }
            else
            {
                return null;
            }
        }
        set
        {

        }
    }

    private GameClient gameClient { get {
            if(mymatcher is not null && gameServer is not null)
            {

                return gameServer.Getmy(mymatcher.id);
            }
            else
            {
                return null;
            }

        }
        set { } 
    }

    private int newValue = 10;
    private string newValueStr = "10";
    private Matcher mymatcher;

    private void DeleteClick()
    {
        if(newValueStr.Length > 1)
        {
            newValueStr = newValueStr.Remove(newValueStr.Length - 1);
            newValue = int.Parse(newValueStr);
        }
        else
        {
            newValueStr = "0";
            newValue = 0;
        }
        if (newValue > 9) { 
            gameServer.send(mymatcher.id, newValue);
        }
    }
    private void CEclick()
    {
        newValueStr = "";
        newValue = 0;
        if(newValue>9){
            gameServer.send(mymatcher.id, newValue);
        }
    }

    private EventCallback Clicked(int i)
    {
        newValueStr = newValueStr + i.ToString();
        newValue = int.Parse(newValueStr);
        if (gameServer is not null)
        {
            if (newValue > 9)
            {
                gameServer.send(mymatcher.id, newValue);
            }
        }
        return new EventCallback();
    }
    private async Task Play()
    {
        if(mymatcher is null){

            Byte[] x = await GetByteArrayAsync();
            mymatcher = ss.StartMatchMake(x,gamemode);
            t.Start();
        }
        else
        {
            if(gameServer is not null)
            {
                if (!gameServer.ingame)
                {
                    Byte[] x = await GetByteArrayAsync();
                    mymatcher = ss.StartMatchMake(x, gamemode);
                    t.Start();

                }
            }
        }
        ss.checkMatchMake(mymatcher);

    }



    private async Task<Byte[]> GetByteArrayAsync()
    {
        try
        {
            // Check if the byte array exists in local storage
             var base64Encoded = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "my_byte_array");
            if (!string.IsNullOrEmpty(base64Encoded))
            {
                Console.WriteLine("base64Encoded");
                // Retrieve the byte array from local storage
                return Convert.FromBase64String(base64Encoded);
            }
            else
            {
                // Generate a new byte array
                var randomBytes = new Byte[32];
                new Random().NextBytes(randomBytes);

                // Save the byte array to local storage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "my_byte_array", Convert.ToBase64String(randomBytes));

                return randomBytes;
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions (e.g., when local storage is disabled or unavailable)
            // You can log the exception or take appropriate action
            Console.WriteLine($"Error accessing local storage: {ex.Message}");
            return null; // Return null or handle the error as needed
        }
    }
    private Timer timer;
    private Stopwatch t = new Stopwatch();
    protected override void OnInitialized()
    {
        // Set up the timer to tick every second
        timer = new Timer(TickTimer, null, 1000, 1000);
    }

    private int calculateRecomended()
    {
        if(gameClient is not null)
        {

            return gameClient.targetValue / gameClient.otherValue;
        }
        return 0;
    }
    void TickTimer(object state)
    {
        InvokeAsync(StateHasChanged);
    }
    string recomendvalue()
    {
        if (gameServer is not null)
        {

            if (gameServer.t.Elapsed > TimeSpan.FromSeconds(30))
            {
                var x = newValue.ToString();
                var y = calculateRecomended().ToString();
                if (y.StartsWith(x))
                {
                    if (y.Length > x.Length)
                    {
                        return y[x.Length].ToString();
                    }
                }
                if (newValue == 0)
                {
                    return y[0].ToString();
                }
                return "CE";

            }
        }
        return "";
    }
    private void StopMatching(MouseEventArgs e)
    {
        ss.stopMatchMake(mymatcher);
        mymatcher = null;
        t.Restart();
        t.Stop();
    }
}
