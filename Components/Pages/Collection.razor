@page "/collection"

@using Data
@using System.Diagnostics
@using System;
@using System.Text.Json;
@using Microsoft.JSInterop;
@using CoOpCalculator.Components.Pages.CollectionView;
@inject ServerService ss;
@inject IJSRuntime JSRuntime

<h3>Collection</h3>
@if (myCollection is not null)
{
    int z = 9;
    
    <div style="gutter" class="row">
@foreach (byte m in myCollection)
{
            z++;
            int i = z;
            <div style="width:fit-content" class="col-2">
        <Card i="@z" level="@m" ></Card><br/>
        </div>
}
    </div>
}
@code {
    private byte[] myCollection { get; set; } = new byte[90];
    private EventCallback generateCard(int z)
    {
        var tempStats = new Stats();
        tempStats.collection = myCollection;
        if (tempStats is not null)
        {
            tempStats.getStar(z, "M");
            tempStats.getStar(z, "L");
            tempStats.getStar(z, "R");
            tempStats.getCard(z, "B");
            tempStats.getCard(z, "S");
            tempStats.getCard(z, "G");
            myCollection = tempStats.collection;
        }
        save();
        return new EventCallback();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        myCollection = await GetByteArrayAsync();
        InvokeAsync(StateHasChanged);
    }
    private async Task save()
    {
        // Generate a new byte array
        var randomBytes = myCollection;

        // Save the byte array to local storage
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "myStats", Convert.ToBase64String(randomBytes));

        myCollection =  randomBytes;
        
    }
    private async Task<Byte[]> GetByteArrayAsync()
    {
        try
        {
            // Check if the byte array exists in local storage
            var base64Encoded = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "myStats");
            if (!string.IsNullOrEmpty(base64Encoded))
            {
                // Retrieve the byte array from local storage
                return Convert.FromBase64String(base64Encoded);
            }
            else
            {
                // Generate a new byte array
                var randomBytes = myCollection;

                // Save the byte array to local storage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "myStats", Convert.ToBase64String(randomBytes));

                return randomBytes;
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions (e.g., when local storage is disabled or unavailable)
            // You can log the exception or take appropriate action
            return null; // Return null or handle the error as needed
        }
    }


}
